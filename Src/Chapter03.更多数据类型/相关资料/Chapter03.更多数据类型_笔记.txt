3.0 序言
	1.讨论将数据元素合并成元组的细节_C# 7.0新增;
	2.讨论如何将数据分组到称为数组的集合中;
3.1 类型的划分_值类型和引用类型的根本区别
	1.值类型:总是拷贝值本身;
	2.引用类型:总是拷贝该值的引用(地址);
3.1.1 值类型
	1.预定义类型除了string其他均为值类型;
	2.值类型直接包含值_变量引用的位置就是内存中实际存储的位置;
	3.在方法内部对参数值进行任何修改都不会影响调用函数中的原始值;
	4.占用内存比引用类型多;
3.1.2 引用类型
	1.引用类型的变量存储对数据存储位置的引用,而不是直接存储数据;
	2.访问数据,要先从变量中读取内存位置,再跳转到包含数据的内存位置;
	3.为引用类型的变量分配实际数据的内存区域成为堆(heap)
	4.拷贝引用类型的实例比拷贝大的值类型实例更高效;
	5.两个不同的变量可引用相同的数据;其中一个变量更改对象字段,用另一个对象访问字段将看到更改的结果;
	
	何时使用值类型和引用类型?
	对象在逻辑上是固定大小,不可变的值---定义成值类型
	对象在逻辑上是可引用,可变的东西---定义引用类型

3.2 可空修饰符
	1.不能将null值赋值给值类型,值类型不能包含引用;
	2.为了能存储null的变量,要使用可空修饰符?

	$引用类型的局部变量
	1.C# 3.0新增上下文关键字var来声明隐式类型的局部变量
	2.虽允许用var取代数据类型,但数据类型已知情况下最好不使用var
	3.使用var变量时,右侧数据类型应显而易见,否则避免使用var声明变量;

	*设计规范:避免使用隐式类型的局部变量,除非所赋的值的数据类型显而易见;

	语言对比:C++/VB/JavaScript void*和var
	隐式类型变量不等价于C++的void*,VB的Variant或JavaScript的var
	类似于C#将变量声明为Object类型
	C#的var由编译器严格确定类型,确定了就不能变,类型检查和成员调用都会在编译时进行验证;

	高级主题:匿名类型
	C# 3.0添加var的真正目的是支持匿名类型
	匿名类型:匿名类型是在方法内部动态声明的数据类型;
	C# 7.0引入元组语法后,匿名类型基本被代替;

3.3 元组(tuple)
	允许在一个语句中完成所有变量的赋值;
	(string country,string capital,double gdpPerCapital)=("Malawi","Lilongwe",226.50);