------------------------------[基础知识]--------------------------------
1.C#是一种高级语言;
2.C#可以构建多系统多平台的软件和应用程序;
3.学习编程语言最好的办法就是写代码;
4.SDK:Software Development Kit(软件开发包)
5.项目文件结构的说明:
	1).生成Program.cs的控制台程序起点;
	2).生成.csproj的项目文件
		*编译使用的平台类型
		*生成的目标程序类型
		*支持的目标框架
		*启动设置参数
		*代码的依赖项(库)
6.C#的关键字
	关键字的作用:为帮助编译器解释代码;
	上下文关键字:特定位置才有意义,其他位置无意义;
7.标识符两种风格
	Pascal风格:PascalCase
	camel 风格:camelCase
8.关键字高级用法:关键字附加"@"前缀可作为标识符使用
	eg:@return,@throw()方法
9.保留关键字
	__arglist
	__makeref
	__reftype
	__refvalue
10.类型的定义
	所有类名使用PascalCase大小写风格
11.什么是方法
	方法是已命名的代码块
	方法可以重用,避免代码重复
	方法声明定义包括定义方法名和定义传入和传出方法的数据
	C#程序从Main方法开始执行
	static关键字和Main方法名匹配使用
	若不指定static,启动程序还需要先对类进行实例化;如果指定则无需实例化,使用类名.方法名即可调用
12.语言对比:C++/Java--main()方法是全部小写,C#遵循Pascal为Main()
13.C#使用分号标识语句结束
14.访问修饰符
	class的默认访问修饰符是internal,只允许在本项目访问;如需跨项目访问则需public权限
	方法默认访问修饰符private,只允许在本类内部访问;如需跨类访问需public权限;如果是继承的子类访问只需要protected
	private : 同一类和结构的代码可以访问该类型和成员。
	protected : 同一类和派生(继承特性)类中的代码可以访问该类型和成员。
	protected internal : 同一程序集中的任何代码或其他程序集中的任何派生类都可以访问该类型或成员。
15.类的成员
	属性、方法、索引、代理、事件、嵌套类、字段
	类不能直接访问其他方法,需要在方法内部访问其他方法
16.Main方法参数和返回值讲解
	    public static int Main(string[] args)   //args参数是用于接收命令参数的字符串数组
        {
            //..
            return 0;   //Main返回的是int状态码,标识程序执行成功与否,返回非0通常意味错误;
        }
17.使用空白格式化代码可以增强代码可读性
18.变量声明后可以对变量进行赋值,计算和输出等操作,但变量一旦声明,数据类型就不能改变
19.局部变量
	变量是存储位置的符号名称,程序以后可以对该存储位置进行修改赋值等
	局部意味着变量声明在方法或代码块({}内)内部声明,作用域"局部"于当前代码块;
	声明变量的两个要素:
	1.变量的类型
	2.变量的名称
20.数据类型
	int是指C#的32位整型
	char是字符型,长度为16位;
21.初学者主题:什么是数据类型?
	数据类型(或对象类型)是具有相似特征和行为的个体的分类;
	类型是被赋予了相似特性的一些个体的定义;
22.变量的说明和书写格式
	同一条语句声明的多个变量有证相同的类型
	eg: string message1,message2;
	变量名可以以任何字母或下划线开头,后跟任意数的字母,数字或下划线;
	局部变量采用camelCase
23.变量的赋值
	局部变量声明后必须在读取前赋值(初始化);
24.高级主题:字符串的不可变性
	string字符串类型不能修改变量最初引用的数据,只能重新赋值,让它指向内存中的新位置;
25.Console.ReadLine()和Console.Read()的区别
Console.ReadLine():返回的是实际字符串值
Console.Read():返回的是实际字符值对应的整数,没有更多字符可用就返回-1;如果需要获取实际字符,需要将整数转换为字符型
Console.ReadKey():返回用户单次按键输入,比如校验用户输入的是否为数字键
26.Console.WriteLine()和Console.Write()的区别
Console.WriteLine():在输入文本后自动添加换行符
Console.Write():在输入文本后不自动添加换行符
26.占位符
	占位符在格式化字符串中可以按任意顺序出现;
	同一占位符可以多次使用;
	可省略占位符,但每个占位符都必须有对应实参???
27.设计规范:
	不要使用注释,除非代码本身"一言难尽"
	要尽量写清楚代码而不是通过注释澄清算法
28.XML:可扩展的标记语言
	用于Web应用和应用程序间的数据交换
	XML可扩展是因为XML包含的是对数据进行描述的信息,也称元数据
29.托管执行和CLI初理解
	处理器需要通过CLI(公共中间语言)来解释程序集
	C#编译器将源码转换成CLI语言
	VES(虚拟执行系统)在运行时将CLI代码即时编译成机器码(此过程称为托管执行)
	可以使用混淆器来防止反编译
30..Net框架分类
	.NetCore	跨平台,开源,提供高度模块化的API集合
	.NetFramework	第一个,最大,最广的.Net框架
	Xamarin		.Net移动平台的实现,支持iOS和Android,支持单一代码库的开发,同时允许访问本机代码API
	Mono		最早,是Xamarin和Unity的基础,已被.NetCore代替
	Unity		跨平台2D/3D游戏引擎
	.NetCore才是.Net的未来
31.API的理解
	API:应用程序编程接口
	一个程序集中的所有类型(及其成员)构成该程序集的API
	.NetCore中所有程序集构成的更大API称为框架
	API包含接口和协议(程序集执行规则)
-----------------------------------------------------------------------
------------------------------[重点知识]--------------------------------
1.C#是区分大小写的语言;
2..Net框架默认选择.NetCore:可以跨平台
3.使用"命令行接口"CLI(Command-Line Interface)生成项目和编译运行项目:
	1).打开Windows PowerShell工具
	2).命令:mkdir ./HelloWorld		---创建一个HelloWorld的项目文件夹
	3).命令:cd ./HelloWorld			---切换到HelloWorld项目目录
	4).命令:dotnet new console		---生成项目程序基本框架
	5).命令:dotnet run				---运行生成的程序
	*注意:如果项目含有解决方案,则可以到.sln文件目录通过如下命令编译解决方案中的所有项目
	命令:dotnet build
	运行可以使用5)的方式,也可以使用命令任何目录均可执行的方式
	命令格式:dotnet run -p <projectfile>
	eg:dotnet run -p J:\Documents\Source\Repos\EssentialCSharp_7.0\Src\Chapter01.CSharp概述\Chapter01.CSharp概述.csproj		---绝对路径
	eg:dotnet run -p .\Src\Chapter01.CSharp概述\Chapter01.CSharp概述.csproj		---相对路径(也可以使用/)

4.集成开发环境(IDE)
	1).VS快捷键:
		F9：设置/取消 短点
		F5: 调试
5.*线程和堆栈帧的初理解:
	1).线程: 每次调试程序,系统创建的线程ID会随机;也就是线程ID不固定;
	2).堆栈帧: 从上往下依次是从外到里的调用顺序;
6.编译和执行的理解_库文件和exe文件的理解
	1).扩展名位.dll代表"动态链接库";
	2).对于.NetCore,所有程序集都使用.dll扩展名
	3).编译输出默认目录:./bin/Debug/netcoreapp2.1
	4).编译好的输出.dll文件不能直接执行,需要使用CLI来寄宿(host)代码;对于.NetCore应用程序,使用Dotnet.exe作为寄宿进程;
	5).---如果使用.Net Framework平台,则编译后的exe文件可以直接执行;
	6).建议使用.NetCore平台生成的.dll程序集库文件,库文件相比.exe文件的好处是:库文件可以为其他程序所引用;
7.语言对比:Java---文件名必须匹配类名
	C#是常遵守但非必须;一个文件可以包含多个类
	[C# 2.0特性]类的代码可通过所谓的[分部类]拆分到多个文件中;
-----------------------------------------------------------------------