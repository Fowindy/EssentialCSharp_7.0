序言
	1.操作符提供了对操作数执行各种计算或操作的语法;
	2.控制流程语句控制程序的条件逻辑,或多次重复一节代码;

4.1 操作符
	初学者主题:操作符
	操作符对称为操作数的值(或变量)执行数学或逻辑运算或操作来生成新值(称为结果);

	操作符的分类:一元,二元,三元
	一元:对应一个操作数;
	二元:对应两个操作数;
	三元:对应三个操作数;

4.1.1 一元正负操作符(+,-)
	一元负操作符<=>从零减去操作数;
	一元正操作符<=>对值几乎没影响;(多余的,处于对称美观)

4.1.2 二元算术操作符(+,-,*,/,%)
	1.二元操作符要求两个操作数;
	2.操作符在左右操作数之间;
	3.除赋值外,每个二元操作符的结果必须以某种方式使用;

	语言对比:C++ 仅有操作符的语句
	C++允许4+5单独存在;
	C#只有赋值,通用,递增,递减,await和对象创建表达式才允许单独存在;

	操作符的优先级:
	1.*、/和%具有最高优先级
	2.+和-具有较低优先级
	3.=在6个操作符中优先级最低

	初学者主题:圆括号、结合性、优先级和求值
	1.结合性决定相似操作符的执行顺序,优先级决定不相似操作符的执行顺序;
	2.C#的大多数操作符都是左结合的,赋值操作符右结合;
	3.用圆括号增强代码可读性;
	4.相邻的两个操作符,高优先级的先于低优先级的执行;
	5.优先级和结合性只影响操作符自身的执行顺序,不影响操作数的求值顺序;
		例子:A()+B()*C(),首先求值A(),然后B(),然后c(),然后乘法操作符决定乘积,最后加法操作符决定和;

	设计规范:要用圆括号增加代码的易读性

	语言对比:C++ 操作数求值顺序
	C++规范允许不同的实现自行选择操作数求值顺序

	设计规范:要在字符串可能会本地化时用复合格式化而不是加法操作符来连接字符串

	浮点类型的特殊性
	1.float具有7位精度,能纳值1234567和值0.1234567;
	2.进制浮点类型内部存储二进制分数而不是十进制分数;

	设计规范:要求高精度请使用decimal类型
	避免在需要准确的十进制小数算术运算时使用二进制浮点类型,应使用decimal浮点类型

	高级主题:浮点类型造成非预期的不相等
	比较两个值是否相等,浮点类型的不准确性可能造成严重后果