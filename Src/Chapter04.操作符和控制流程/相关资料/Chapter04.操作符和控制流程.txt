序言
	1.操作符提供了对操作数执行各种计算或操作的语法;
	2.控制流程语句控制程序的条件逻辑,或多次重复一节代码;

4.1 操作符
	初学者主题:操作符
	操作符对称为操作数的值(或变量)执行数学或逻辑运算或操作来生成新值(称为结果);

	操作符的分类:一元,二元,三元
	一元:对应一个操作数;
	二元:对应两个操作数;
	三元:对应三个操作数;

4.1.1 一元正负操作符(+,-)
	一元负操作符<=>从零减去操作数;
	一元正操作符<=>对值几乎没影响;(多余的,处于对称美观)

4.1.2 二元算术操作符(+,-,*,/,%)
	1.二元操作符要求两个操作数;
	2.操作符在左右操作数之间;
	3.除赋值外,每个二元操作符的结果必须以某种方式使用;

	语言对比:C++ 仅有操作符的语句
	C++允许4+5单独存在;
	C#只有赋值,通用,递增,递减,await和对象创建表达式才允许单独存在;

	操作符的优先级:
	1.*、/和%具有最高优先级
	2.+和-具有较低优先级
	3.=在6个操作符中优先级最低

	初学者主题:圆括号、结合性、优先级和求值
	1.结合性决定相似操作符的执行顺序,优先级决定不相似操作符的执行顺序;
	2.C#的大多数操作符都是左结合的,赋值操作符右结合;
	3.用圆括号增强代码可读性;
	4.相邻的两个操作符,高优先级的先于低优先级的执行;
	5.优先级和结合性只影响操作符自身的执行顺序,不影响操作数的求值顺序;
		例子:A()+B()*C(),首先求值A(),然后B(),然后c(),然后乘法操作符决定乘积,最后加法操作符决定和;

	设计规范:要用圆括号增加代码的易读性

	语言对比:C++ 操作数求值顺序
	C++规范允许不同的实现自行选择操作数求值顺序

	设计规范:要在字符串可能会本地化时用复合格式化而不是加法操作符来连接字符串

	浮点类型的特殊性
	1.float具有7位精度,能纳值1234567和值0.1234567;
	2.进制浮点类型内部存储二进制分数而不是十进制分数;

	设计规范:要求高精度请使用decimal类型
	避免在需要准确的十进制小数算术运算时使用二进制浮点类型,应使用decimal浮点类型

	高级主题:浮点类型造成非预期的不相等
	比较两个值是否相等,浮点类型的不准确性可能造成严重后果

	Trace.Assert方法:
	Assert()方法在实参求值为false时提醒开发人员“断言失败”

	设计规范:避免将二进制浮点类型用于相等性条件式
	避免将二进制浮点类型用于相等性条件式。要么判断两个值之差是否在容差范围之内,要么使用decimal类型

	结果为NaN的两种情况:
	1.在C#中,浮点0除以0会得NaN;
	2.获取负数的平方根(System. Math.Sqrt(-1))也会得到NaN

4.1.3 复合赋值操作符(+=,-=,*=,/=,%=)

4.1.4递增和递减操作符(++,--)
	递增操作符(++)每次使一个变量递增1,一元操作符;
	递减操作符(--)使变量递减1,一元操作符;

	初学者主题:循环中的递减示例
	递增和递减操作符在循环(比如稍后要讲到的while循环)中经常用到
	递增和递减操作符用于控制特定操作的执行次数;

	语言对比：C++ 由实现定义的行为
	在C++中,对于M(x++, x++)这样的调用,假定 初值是1,那么既可以调用M(1,2),也可以调用M(2,1）;
	C#则总是调用M(1,2)
	C#保证两点:
	第一,传给调用的实参总是从左向右计算;
	第二,总是先将已递增的值赋变量,再使用表达式的值.

	设计规范
	避免递增和递减操作符的让人迷惑的用法。
	在C、C++和C#之间移植使用了递增和递减操作符的代码要小心。C和C++的实现遵
	循的不一定是和C#相同的规则。

	高级主题：线程安全的递增和递减
	可用lock语句防止出现竞争条件;
	System.Threading. Interlocked类提供的线程安全方法Increment()和Decrement()

	设计规范:常量const
	1.不要用常量表示将来可能改变的任何值;

4.2.2嵌套if
	if语句规范提倡除了单行语句之外都使用代码块(大括号)\

	代码块:
	大括号将多个语句合并成代码;
	如果没有大括号,在布尔表达式返回true的前提下,只有紧接在if语句之后的那条语句才会执行;

	设计规范:除非最简单的单行if语句,否则避免智略大括号

4.4代码块、作用域和声明空间
	代码块经常被称为作用域;
	作用域决定一个名称引用什么事物,而声明空间决定同名的两个事物是否冲突;

	一个变量的声明空间是当前代码块以及它的所有子代码块;

	语言对比：C++ 局部变量作用域
	在C++中,对于块中声明的局部变量,它的作用域是从声明位置开始,到块尾结束;
	C#的规则稍有不同,对于声明局部变量的那个块,局部变量都在作用域中,但声明前引用它属于非法;

4.5布尔表达式
	if语句中包含在圆括号内的部分是布尔表达式,称为条件;

	语言对比: C++ 错误地使用=来代替==
	C和C++将非零整数视为true,将零视为false.
	要求条件必须是布尔类型,不允许整数

4.5.1 关系操作符和相等性操作符
	C#使用相等性操作符==来测试相等性
	C#测试不等性的操作符是!=
4.5.2逻辑操作符
	1.逻辑操作符获取布尔操作数并生成布尔结果;
	2.逻辑操作符包括|、||、&、&&和^
			   对应OR,AND,XOR
			   |和&比较少用

	1).OR操作符(||)
	||操作符对两个布尔表达式进行求值,任何一个为true就返回true
	OR操作符从左向右求值,所以假如左边求值为true,那么右边可以忽略
	短路求值方式同样适合布尔AND操作符

	2).AND操作符(&&)
	布尔AND操作符&&在两个操作数求值都为true的前提下才返回true。任何操作数为
	false都会返回false.

	3)XOR操作符(^)
	只有在两个操作数中仅有一个为true的前提下, XOR操作符才会返回true;
	布尔XOR操作符不支持短路运算,它始终都要检查两个操作数,因为除非确切知道两个操作数的值,否则不能判定最终结果

4.5.3逻辑求反操作符(!)
	逻辑求反操作符(!)有时也称为NOT操作符,作用是反转一个bool数据类型的值;一元操作符;

4.5.4条件操作符(?:)
	可用条件操作符取代if-else语句来选择两个值中的一个;三元操作符;条件操作符也采用了某种形式的短路求值

	设计规范:尽量用if_else代替条件表达式
	考虑使用if/else语句而不是过于复杂的条件表达式

4.5.5空合并操作符(??)
	如果这个值为空,就使用另一个值;支持短路求值,二元操作符;

4.5.6空条件操作符(?.)
	用于返回值类型的成员时,总是返回该类型的可空版本

	高级主题：空条件操作符应用于委托

4.6按位操作符(<<,>> , |, &, ^,~)
	几乎所有编程语言都提供了一套按位操作符来处理值的二进制形式。

	初学者主题：位和字节
	1.1和0称为二进制位(bit)
	2.8位一组称为字节(byte)
	3.最右边的位对应2的0次幂,最左边的对应2的7次幂
	3.有符号的数(long, short, int)使用2的补数记数法表示;

	二进制无符号和有符号值的计算规则
	无符号
	0 0 0 0 0 1 1 1
	          4+2+1=7
    有符号
	1 1 1 1 1 0 0 0	(先取反)
	1 1 1 1 1 0 0 1	(再加一成负数的二进制形式)
	         -4-2  -1 = -7        

	-63
	0	0	1	1	1	1	1	1	(63的二进制)
	1	1	0	0	0	0	0	1	(取反加1___-63的二进制)