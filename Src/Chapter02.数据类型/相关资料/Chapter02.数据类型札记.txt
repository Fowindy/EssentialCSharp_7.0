1.C#的基本类型
C#有大量数据类型,可以合并类型创建新类型
基本类型:8种整数类型,2种科学计算的二进制浮点型,1种金融计算的十进制浮点类型,1种布尔类型,1种字符类型;
2.C#基本数值类型
	包括整数类型,浮点类型,decimal类型(能无误的存储大数字)
	8种整型,恰当使用避免浪费资源
		sbyte: 8位有符号
		byte:	8位无符号
		short:	16位有符号
		ushort:	16位无符号
		int:	32位有符号
		uint:	32位无符号	后缀u
		long:	64位有符号	后缀l
		ulong:	64位无符号	后缀ul
3.语言对比:C++的short类型
	C/C++的short是short int的缩写
	C#的short是实际存在的类型
4.浮点类型(float和double:二进制浮点类型)
	浮点类型的精度由有效数位的个数决定
	float: 32位单精度	7位有效数位	后缀f
	double:	64位双精度	15~16位有效数位	后缀d
5.decimal类型(十进制浮点类型)
	decimal:	128位	28~29位有效位	后缀m
	decimal类型所有十进制数都是精确的
	decimal比浮点类型精度高,但范围小,从浮点型转decimal可能会溢出报错,decimal计算速度比浮点型慢(可忽略)
6.高级主题:浮点类型和decimal类型比较
	decimal类型在范围和精度限制内的十进制数完全准确
	浮点数类型使用二进制表示十进制数,可能有精度误差(比如0.1,表示分数为1/10,但是分母10不能表示2的整数次幂,所以有精度误差)
7.字面值
	字面值:源码中的固定值
8.硬编码
	直接将值放到源代码中称为硬编码,慎用;推荐从外部源获取值;方便后续维护不需要重新编译,如果硬编码则需要重新编译
	小数点	默认		double
	整数		默认		int
	大整数	默认		long
9.decimal
	要显示完整精度的数字,必须在字面值显式声明为decimal类型,加m后缀实现
10.字面值的解析顺序
	无后缀:int-->uint-->long---ulong
	后缀u:uint-->ulong
	后缀l:long-->ulong
	后缀ul/lu:ulong
	设计规范:要使用大写的字面后缀
11.16进制记数法
	每个数位可用16个符号表示:0~9,A~F(允许小写)
	16进制和10进制转换不会改变数本身,改变的只是表示形式
	每个16进制数位都用4个二进制位表示,所以一个字节(byte)8位二进制位2位16进制位
	16进制字面值表示:加0x前缀
12.二进制记数法
	二进制字面值表示:加前缀0b(允许大写B)
13.高级主题:将数字格式化成十六进制
	要显示十六进制,必须使用x或X数值格式化说明符(大小写决定十六进制字母大小写)
	Console.WriteLine($"0x{42:X}");
	42可随便使用十进制或者二进制形式,格式说明符之前要加冒号:
14.高级主题:round-trip格式化
	Console.WriteLine(string.Format("{0:R}", 1.618033989749895));
	输出 1.618033989749895 不会丢失精度
15.string.Compare()可以比较两个字符串是否相等(false:忽略大小写)
            int comparison = string.Compare("/HElp", "/Help", false);
            Console.WriteLine(comparison==1?"相同":"不同");
16.布尔类型(bool)
	虽然理论上一个二进制足以容纳一个布尔类型的值,但bool实际大小是一个字节(8位)
17.字符类型(char)
	字符类型:16位	两个字节		取值范围:Unicode字符集
	char的大小和16位无符号整数相同(uint),取值范围:0~65535
	char是C#的特有类型
18.初学者主题:Unicode标准
	Unicode:字符国际标准,表示大多数语言中的字符
19.高级主题:16位不足以表示所有Unicode字符
	随着支持语言的增多,有些Unicode字符需要用一对"代理项"的char构成,32位
	char字面值:需要将字符放到单引号中,eg:'A'
20.转义序列
	转义序列:反斜杠和特殊字符的代码统称
	eg:
	\n---换行
	\t---制表符
	\\---反斜杠符
	\'---单引号
	\r---回车
	\"---双引号